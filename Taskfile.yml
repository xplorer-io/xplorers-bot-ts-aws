version: 3

dotenv:
  - ./configuration/defaults.conf

vars:
  FUNCTION_ARTIFACT: terraform/handler.zip

tasks:
  install:
    desc: Install dependencies (node modules)
    cmds:
      - npm install

  update-dependencies:
    desc: Update dependencies (node modules)
    cmds:
      - npm update && npm upgrade

  test:
    desc: Run unit tests using jest
    cmds:
      - npm run test

  compile:
    desc: Compile typescript files
    cmds:
      - tsc

  clean:
    desc: Clean artifacts and dependencies
    cmds:
      - rm -rf dist/
      - rm -rf {{.FUNCTION_ARTIFACT}}
      - rm -rf out/

  package:
    desc: Package and zip the application code for deployment
    deps: [clean, install, compile]
    cmds:
      - rm -rf node_modules && npm install --omit=dev
      - mkdir -p nodejs && cp -R node_modules nodejs

  deploy-oidc-cloudformation-stack:
    desc: Deploy OIDC CloudFormation stack
    cmds:
      - |
        aws cloudformation deploy \
          --stack-name xplorers-oidc \
          --template-file cloudformation/oidc.yaml \
          --capabilities CAPABILITY_NAMED_IAM

  create-secrets:
    desc: Create required secrets in AWS Secrets Manager
    summary: |
      Create secrets in AWS Secrets Manager to store the slack token, azure openai endpoint and key

      Don't forget to set SLACK_OAUTH_TOKEN, AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_KEY env vars
      before running this command.

      If you only want to test the slack feature, only supplying the SLACK_OAUTH_TOKEN is enough.
    cmds:
      - ignore_error: true
        cmd: |
          SLACK_SECRET_NAME=slack-oauth-token-${TF_WORKSPACE}
          AZURE_SECRET_NAME=azure-openai-endpoint-${TF_WORKSPACE}
          OPENAI_SECRET_NAME=azure-openai-key-${TF_WORKSPACE}

          aws secretsmanager create-secret --name ${SLACK_SECRET_NAME} --secret-string=${SLACK_OAUTH_TOKEN} --description="Slack OAuth Token"
          aws secretsmanager create-secret --name ${AZURE_SECRET_NAME} --secret-string=${AZURE_OPENAI_ENDPOINT} --description="Azure OpenAI Endpoint"
          aws secretsmanager create-secret --name ${OPENAI_SECRET_NAME} --secret-string=${AZURE_OPENAI_KEY} --description="Azure OpenAI Key"

  terraform-fmt:
    dir: terraform
    desc: Format terraform files
    cmds:
      - |
        terraform fmt

  terraform-init:
    dir: terraform
    desc: Initialize terraform backend, providers, plugins and modules
    cmds:
      - |
        terraform init \
        -backend-config="bucket=${XPLORERS_ARTIFACTS_BUCKET_NAME}" \
        -backend-config="key=${XPLORERS_ARTIFACTS_BUCKET_TERRAFORM_PREFIX}" \
        -backend-config="region=${AWS_DEFAULT_REGION}"

  terraform-plan:
    dir: terraform
    desc: Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure.
    deps: [terraform-init, package]
    cmds:
      - |
        terraform plan \
        -var "xplorers_openai_slack_channel_id=${XPLORERS_OPENAI_SLACK_CHANNEL_ID}" \
        -var "xplorers_artifacts_bucket_name=${XPLORERS_ARTIFACTS_BUCKET_NAME}" \
        -var "azure_openai_deployment_id=${AZURE_OPENAI_DEPLOYMENT_ID}"

  terraform-apply:
    dir: terraform
    desc: Apply the planned changes to the target infrastructure
    deps: [package, terraform-plan]
    cmds:
      - defer: { task: clean }
      - |
        terraform apply -auto-approve \
        -var "xplorers_openai_slack_channel_id=${XPLORERS_OPENAI_SLACK_CHANNEL_ID}" \
        -var "xplorers_artifacts_bucket_name=${XPLORERS_ARTIFACTS_BUCKET_NAME}" \
        -var "azure_openai_deployment_id=${AZURE_OPENAI_DEPLOYMENT_ID}"

  terraform-destroy:
    dir: terraform
    desc: Delete all resources created by terraform
    cmds:
      - |
        terraform destroy -auto-approve \
        -var "xplorers_openai_slack_channel_id=${XPLORERS_OPENAI_SLACK_CHANNEL_ID}" \
        -var "xplorers_artifacts_bucket_name=${XPLORERS_ARTIFACTS_BUCKET_NAME}" \
        -var "azure_openai_deployment_id=${AZURE_OPENAI_DEPLOYMENT_ID}"
